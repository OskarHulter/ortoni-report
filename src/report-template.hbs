<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Playwright Test Report</title>
    <link rel="icon" href="src\icon\32.png" type="image/x-icon">
    <link rel="stylesheet" href="src\css\pico.css">
    {{!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.css"> --}}
    <style>
        main.container {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
        }

        .header {
            display: grid;
            grid-template-columns: 1fr 2fr;
            grid-column-gap: 20px;
            grid-row-gap: 20px;
            justify-items: stretch;
            align-items: center;
            justify-content: space-evenly;
        }

        .highlight {
            background-color: var(--pico-primary-background)
        }

        .text-success {
            color: #28a745;
        }

        .text-failure {
            color: #dc3545;
        }

        .text-skip {
            color: #d5d4a1;
        }

        .text-flaky {
            color: #d5d4a1;
        }

        .sidebar {
            border-right: 1px solid #ddd;
            padding-right: 10px;
        }

        pre {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.5rem;
            overflow-x: auto;
        }

        .back-button {
            display: none;
            margin-bottom: 1rem;
        }
    </style>
</head>

<body>
    <header class="container">
        <div class="header">
            {{!-- Custom Project Name --}}
            <div>
                {{#if projectName}}<h1>{{projectName}}</h1>{{/if}}
            </div>
            {{!-- Dummy for now --}}
            <div>
                <form role="search">
                    <input name="search" type="search" placeholder="Search" />
                    <input type="submit" value="Search" />
                </form>
            </div>
        </div>
    </header>
    <main class="container">
        {{!-- Test Scripts --}}
        <aside class="sidebar">
            <h2>Tests</h2>
            <div class="">
                {{#each groupedResults}}
                <details>
                    <summary>{{@key}}</summary>
                    <ul>
                        {{#each this}}
                        <details>
                            <summary>{{@key}}</summary>
                            <ul>
                                {{#each this}}
                                <details>
                                    <summary>{{@key}}</summary>
                                    <ul>
                                        {{#each this}}
                                        <li data-suite-name="{{suite}}" data-project-name="{{projectName}}"
                                            data-test-id="{{index}}">{{title}}</li>
                                        {{/each}}
                                    </ul>
                                </details>
                                {{/each}}
                            </ul>
                        </details>
                        {{/each}}
                    </ul>
                </details>
                {{/each}}
            </div>
        </aside>
        <section>
            {{!-- Overall summar --}}
            <div id="summary">
                <section class="grid">
                    <div>
                        <article>
                            <header>All Tests</header>
                            <p>{{totalCount}}</p>
                        </article>
                    </div>
                    <div>
                        <article>
                            <header>Passed</header>
                            <p class="text-success">{{passCount}}</p>
                        </article>
                    </div>
                    <div>
                        <article>
                            <header>Failed</header>
                            <p class="text-failure">{{failCount}}</p>
                        </article>
                    </div>
                </section>
                <section class="grid">
                    <div>
                        <article>
                            <header>Skipped</header>
                            <p class="text-skip">{{skipCount}}</p>
                        </article>
                    </div>
                    <div>
                        <article>
                            <header>Flaky</header>
                            <p class="text-flaky">{{flakyCount}}</p>
                        </article>
                    </div>
                </section>
                {{!-- Suite details with chart --}}
                <section>
                    <article>
                        <header>Suite</header>
                        <div class="grid">
                            <div>
                                {{#if authorName}}<h4>Author: {{authorName}}</h4>{{/if}}
                                {{#if testType}}<h4>Test Type: {{testType}}</h4>{{/if}}
                                {{#if totalDuration}}<h4>Duration: {{totalDuration}}</h4>{{/if}}
                            </div>
                            <div class="chart-container">
                                <canvas id="testChart"></canvas>
                            </div>
                        </div>
                    </article>
                </section>
            </div>
            {{!-- Test details --}}
            <div id="testDetails" style="display: none;">
                <!-- Back button should be outside the dynamic content -->
                <button class="back-button" onclick="showSummary()">Back to Summary</button>
                <!-- Test Details will be displayed here -->
            </div>
        </section>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <script>
        function escapeHtml(unsafe) {
            return unsafe.replace(/[&<"']/g, function (match) {
                const escapeMap = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#039;'
                };
                return escapeMap[match];
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            const testData = {{{ json results }}};
        const testDetails = document.getElementById('testDetails');
        const summary = document.getElementById('summary');
        const backButton = document.querySelector('.back-button');
        const testItems = document.querySelectorAll('[data-test-id]');
        const searchInput = document.querySelector('input[name="search"]');
        const searchForm = document.querySelector('form[role="search"]');

        function showSummary() {
            summary.style.display = 'block';
            testDetails.style.display = 'none';
            backButton.style.display = 'none';
            clearHighlights();
        }
        function clearHighlights() {
            testItems.forEach(item => item.classList.remove('highlight'));
        }

        window.showSummary = showSummary;

        function displayTestDetails(test) {
            summary.style.display = 'none';
            testDetails.style.display = 'block';
            backButton.style.display = 'block';
            testDetails.innerHTML = `
                    <button class="back-button" style="display: block" onclick="showSummary()">Back to Summary</button>
                    <h3>${test.title}</h3>
                    <div class="grid">
                        <div>
                            <h4>Status</h4>
                            <p class="${test.status === 'passed' ? 'text-success' : 'text-failure'}">${test.status.toUpperCase()}</p>
                            ${test.duration != '0s' ? `
                            <h4>Duration</h4>
                            <p>${test.duration}</p>` : ""}
                        </div>
                        <div>
                            ${test.screenshotPath ? `
                            <h4>Screenshot</h4>
                            <img src="${test.screenshotPath}" alt="Screenshot">
                            ` : ''}
                        </div>
                    </div>
                    <div>
                    ${test.errors.length ? `
                            <h4>Errors</h4>
                            <pre>${escapeHtml(test.errors.join('\n'))}</pre>
                            ` : ''}
                    </div>
                    <div>
                    ${test.logs ? `
                            <h4>Logs</h4>
                            <pre>${escapeHtml(test.logs)}</pre>
                            ` : ''}
                    </div>
        `;
        }
        
        function searchTests(query) {
            const lowerCaseQuery = query.toLowerCase();
            if (lowerCaseQuery === '') {
                testItems.forEach(item => {
                    item.style.display = 'block';
                });
            } else {
                testItems.forEach(item => {
                    const title = item.textContent.toLowerCase();
                    if (title.includes(lowerCaseQuery)) {
                        item.style.display = 'block';
                    } else {
                        item.style.display = 'none';
                    }
                });
            }
        }

        searchForm.addEventListener('submit', event => {
            event.preventDefault();
            searchTests(searchInput.value);
        });
        searchInput.addEventListener('input', () => {
            searchTests(searchInput.value);
        });


        testItems.forEach(item => {
            item.addEventListener('click', () => {
                const testId = item.getAttribute('data-test-id');
                const test = testData[testId];
                displayTestDetails(test);
                clearHighlights();
                item.classList.add('highlight');
            });
        });

        const ctx = document.getElementById('testChart').getContext('2d');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Passed', 'Failed', 'Skipped'],
                datasets: [{
                    data: [{{ passCount }}, {{ failCount }}, {{ skipCount }}],
            backgroundColor: ['#28a745', '#dc3545', '#d5d4a1']
                    }]
                },
            options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
            });
        });
    </script>
</body>

</html>